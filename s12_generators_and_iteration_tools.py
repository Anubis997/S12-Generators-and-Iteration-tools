# -*- coding: utf-8 -*-
"""S12-Generators and Iteration tools.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1blEvQWQ0qvNe23G7GgeyTMgmYRvlJRsL
"""

import csv
from collections import namedtuple
from datetime import datetime

def parse_value(value, dtype):
    if value == '':
        return None
    if dtype == 'int':
        return int(value)
    elif dtype == 'float':
        return float(value)
    elif dtype == 'date':
        return datetime.strptime(value, '%m/%d/%Y')
    else:
        return value

def csv_namedtuple_iterator(file_path, field_types):
    with open(file_path, newline='') as f:
        reader = csv.reader(f)
        # Read the header row and clean field names
        headers = next(reader)

        remove_spaces=lambda x:x.replace(" ","")

        headers = list(map(remove_spaces,headers))

        # Create namedtuple class
        Summons = namedtuple('Summons',headers)

        # Generate namedtuple instances
        for row in reader:
            # Convert each field to its appropriate type
            converted_row = {
                header: parse_value(row[i], col_types.get(header, 'str'))
                for i, header in enumerate(headers)
            }
            yield Summons(**converted_row)

col_types = {
    'SummonsNumber': 'str',
    'PlateID': 'str',
    'RegistrationState': 'str',
    'PlateType': 'str',
    'IssueDate': 'date',
    'ViolationCode': 'int',
    'VehicleBodyType': 'str',
    'VehicleMake': 'str',
    'ViolationDescription': 'str'
}

file_path="/content/nyc_parking_tickets_extract-1.csv"

# Create the iterator
iterator = csv_namedtuple_iterator(file_path, col_types)

from collections import defaultdict

car_make_counts = defaultdict(int)

for record in iterator:
    car_make_counts[record.VehicleMake] += 1  # Increment the count

for car_make, count in car_make_counts.items():
    print(f"{car_make}: {count}")

